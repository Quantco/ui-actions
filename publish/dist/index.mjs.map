{"version":3,"sources":["../src/index.ts","../src/utils.ts","../src/schemas.ts"],"sourcesContent":["import * as coreDefault from '@actions/core'\nimport { context } from '@actions/github'\nimport multimatch from 'multimatch'\n\nimport { incrementVersion, summary } from './utils'\nimport {\n  incrementTypeSchema,\n  relevantFilesSchema,\n  packageJsonFilePathSchema,\n  latestRegistryVersionSchema,\n  versionMetadataJsonSchema\n} from './schemas'\n\n// --- MOCKING ---\nconst coreMocked = {\n  setFailed: (msg: string) => {\n    console.error(msg)\n    process.exit(1)\n  },\n  getInput: (name: string) => {\n    const value = process.env[`INPUT_${name.replace(/-/g, '_').toUpperCase()}`]\n    if (value === undefined) {\n      throw new Error(`Input required and not supplied: ${name}`)\n    }\n    return value\n  },\n  setOutput(name: string, value: string) {\n    // this is the deprecated format for saving outputs in actions using commands only\n    // just using it here to have some sort of consistent output format\n    console.log(`::set-output name=${name}::${value}`)\n  }\n}\n\nconst core = process.env.MOCKING ? coreMocked : coreDefault\n\n/// --- MAIN ---\n\n// deal with inputs of the github action\nconst incrementType = incrementTypeSchema.parse(core.getInput('increment-type'))\nconst relevantFilesGlobs = relevantFilesSchema.parse(JSON.parse(core.getInput('relevant-files')))\nconst packageJsonFilePath = packageJsonFilePathSchema.parse(core.getInput('package-json-file-path'))\nconst latestRegistryVersion = latestRegistryVersionSchema.parse(core.getInput('latest-registry-version'))\nconst versionMetadata = versionMetadataJsonSchema.parse(JSON.parse(core.getInput('version-metadata-json')))\n\nconst run = () => {\n  const relevantFiles = multimatch(versionMetadata.changedFiles.all, relevantFilesGlobs)\n\n  // filled out with \"constant\" info about repo, base, head, etc.\n  const preparedSummary = summary(\n    {\n      owner: context.repo.owner,\n      repo: context.repo.repo,\n      base: versionMetadata.commitBase,\n      head: versionMetadata.commitHead\n    },\n    packageJsonFilePath,\n    relevantFilesGlobs\n  )\n\n  const oldVersion = versionMetadata.oldVersion\n\n  if (versionMetadata.changed) {\n    return {\n      publish: true,\n      version: versionMetadata.newVersion,\n      reason: preparedSummary(relevantFiles, versionMetadata, oldVersion, versionMetadata.newVersion, false)\n    }\n  } else if (relevantFiles.length > 0) {\n    const incrementedVersion = incrementVersion(latestRegistryVersion, incrementType)\n    return {\n      publish: true,\n      version: incrementedVersion,\n      reason: preparedSummary(relevantFiles, versionMetadata, oldVersion, incrementedVersion, true)\n    }\n  } else {\n    return {\n      publish: false,\n      reason: preparedSummary(relevantFiles, versionMetadata, oldVersion, oldVersion, false)\n    }\n  }\n}\n\ntry {\n  const { publish, version, reason } = run()\n\n  core.setOutput('publish', String(publish))\n  if (version) {\n    core.setOutput('version', version)\n  }\n  core.setOutput('reason', reason)\n} catch (error: any) {\n  core.setFailed(error.message)\n}\n","import type { VersionMetadataResponse } from './schemas'\n\nconst incrementPreRelease = ([major, minor, patch, preRelease]: [string, string, string, number | undefined]): string =>\n  `${major}.${minor}.${patch}-${preRelease !== undefined ? preRelease + 1 : 0}`\n\nconst incrementVersion = (version: string, type: 'pre-release') => {\n  const [major, minor, maybePatch] = version.split('.')\n\n  const [patch, preRelease] = maybePatch.includes('-')\n    ? [maybePatch.split('-')[0], parseInt(maybePatch.split('-')[1])]\n    : [maybePatch, undefined]\n\n  if (Number.isNaN(preRelease)) {\n    throw new Error(`Could not increment version ${version}, pre release should be a number`)\n  }\n\n  // TODO: add support for other types\n  switch (type) {\n    case 'pre-release':\n      return incrementPreRelease([major, minor, patch, preRelease])\n    default:\n      throw new Error(`Unknown increment type \"${type}\"`)\n  }\n}\n\nconst summary =\n  (\n    { owner, repo, base, head }: { owner: string; repo: string; base: string; head: string },\n    packageJsonFilePath: string,\n    relevantFilesGlobs: string[]\n  ) =>\n  (\n    relevantFiles: string[],\n    rawJson: VersionMetadataResponse,\n    oldVersion: string,\n    newVersion: string,\n    didAutoIncrement: boolean\n  ) => {\n    // start of with actual content that greatly depends on the decision about publishing, not publishing, etc.\n    const noNewVersion = `No relevant changes were made since the last time.`\n\n    const newVersionAutoDetected = `Relevant files were changed which resulted in a version bump from \\`${oldVersion}\\` to \\`${newVersion}\\`.\n\n<details>\n  <summary>Relevant files</summary>\n\n  <br />\n\n  ${relevantFiles.map((file) => `- ${file}`).join('\\n')}\n\n  <sup>What is considered a relevant change? Anything that matches any of the following file globs:</sup><br />\n  <sup>${relevantFilesGlobs.map((fileGlob) => `\\`${fileGlob}\\``).join(', ')}</sup>\n\n</details>`\n\n    const newVersionManuallySet = `Version in \\`${packageJsonFilePath}\\` was updated from \\`${oldVersion}\\` to \\`${newVersion}\\`.\nThus a new version was published.\n\n<details>\n  <summary>Relevant files</summary>\n\n  When incrementing the version number manually the relevant files aren't used in the decision making process, nevertheless here they are\n  <br />\n\n  ${relevantFiles.map((file) => `- ${file}`).join('\\n')}\n\n  <sup>What is considered a relevant change? Anything that matches any of the following file globs:</sup><br />\n  <sup>${relevantFilesGlobs.map((fileGlob) => `\\`${fileGlob}\\``).join(', ')}</sup>\n\n</details>`\n\n    // now add the wrapper around it that is the same for all cases\n    const template = (innerText: string) => `\n# publish\n\n<sup>This action checks if the version number has been updated in the repository and gathers a bit of metadata. Visit [ui-actions](https://github.com/Quantco/ui-actions) to get started.</sup>\n\n${innerText}\n\n<details>\n  <summary>Raw JSON data</summary>\n\n  \\`\\`\\`json\n  ${\n    JSON.stringify(rawJson, null, 2)\n      .split('\\n')\n      .map((line) => `  ${line}`)\n      .join('\\n') /* indent each line by 2 spaces */\n  }\n  \\`\\`\\`\n</details>\n\n<sup>\n  Compared\n  [\\`${base.substring(0, 6)}\\`](https://github.com/${owner}/${repo}/commit/${base}) (base)\n  with\n  [\\`${head.substring(0, 6)}\\`](https://github.com/${owner}/${repo}/commit/${head}) (head)\n</sup>\n`\n    // decide which one to use\n    const reason =\n      oldVersion === newVersion ? noNewVersion : didAutoIncrement ? newVersionAutoDetected : newVersionManuallySet\n\n    return template(reason)\n  }\n\nexport { incrementVersion, summary }\n","import * as z from 'zod'\n\nconst semverSchema = z.string().refine((value) => /^([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9]+))?$/.test(value))\nconst semverDiffTypeSchema = z.enum(['major', 'minor', 'patch', 'pre-release'])\n\nconst incrementTypeSchema = z.enum(['pre-release'])\nconst relevantFilesSchema = z.array(z.string())\nconst packageJsonFilePathSchema = z.string()\nconst latestRegistryVersionSchema = semverSchema\n\nconst versionMetadataJsonUnchangedSchema = z.object({\n  changed: z.literal(false),\n  oldVersion: semverSchema,\n  commitBase: z.string(),\n  commitHead: z.string(),\n  changedFiles: z.object({\n    all: z.array(z.string()),\n    added: z.array(z.string()),\n    modified: z.array(z.string()),\n    removed: z.array(z.string()),\n    renamed: z.array(z.string())\n  }),\n  changes: z.array(z.never())\n})\n\nconst versionMetadataJsonChangedSchema = z.object({\n  changed: z.literal(true),\n  oldVersion: semverSchema,\n  newVersion: semverSchema,\n  type: semverDiffTypeSchema,\n  commitResponsible: z.string(),\n  commitBase: z.string(),\n  commitHead: z.string(),\n  changedFiles: z.object({\n    all: z.array(z.string()),\n    added: z.array(z.string()),\n    modified: z.array(z.string()),\n    removed: z.array(z.string()),\n    renamed: z.array(z.string())\n  }),\n  changes: z.array(\n    z.object({\n      oldVersion: semverSchema,\n      newVersion: semverSchema,\n      type: semverDiffTypeSchema\n    })\n  )\n})\n\nconst versionMetadataJsonSchema = z.union([versionMetadataJsonUnchangedSchema, versionMetadataJsonChangedSchema])\n\nexport type SemverDiffType = z.infer<typeof semverDiffTypeSchema>\nexport type VersionMetadataResponse = z.infer<typeof versionMetadataJsonSchema>\n\nexport {\n  incrementTypeSchema,\n  relevantFilesSchema,\n  packageJsonFilePathSchema,\n  latestRegistryVersionSchema,\n  versionMetadataJsonSchema\n}\n"],"mappings":"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","names":["packageJsonFilePath","relevantFilesGlobs"]}